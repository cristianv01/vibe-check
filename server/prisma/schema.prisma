// This is your Prisma schema file.
// It is the single source of truth for your database schema.

// 1. Define the generator for the Prisma Client
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Required for PostGIS
}

// 2. Define the datasource (your database connection)
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis] // Enable PostGIS for geographic data
}

// ----------------------------------------------
// MODELS - These map to the tables in your database
// ----------------------------------------------

model User {
  id                Int       @id @default(autoincrement())
  cognitoId         String    @unique // From AWS Cognito for authentication
  username          String    @unique
  email             String    @unique
  profilePictureUrl String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // --- Relations ---

  // Posts created by this user
  posts             Post[]
  // Locations this user has favorited
  favoriteLocations Favorite[]
  // List of users that this user follows
  following         Follow[]  @relation("UserFollows")
  // List of users that follow this user
  followedBy        Follow[]  @relation("UserIsFollowed")

  @@map("users") // Explicitly map to a table named "users"
}

model Owner {
  id                Int       @id @default(autoincrement())
  cognitoId         String    @unique // From AWS Cognito for authentication
  username          String    @unique
  email             String    @unique
  profilePictureUrl String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // --- Relations ---

  // Locations this owner has claimed
  claimedLocations  Location[]
  // Official responses this owner has written
  officialResponses OfficialResponse[]

  @@map("owners") // Explicitly map to a table named "owners"
}

model Location {
  id               Int        @id @default(autoincrement())
  name             String
  address          String
  // Storing coordinates using PostGIS extension
  coordinates      Unsupported("geography(Point, 4326)")
  claimedByOwnerId Int?       // Nullable: A location might not be claimed
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // --- Relations ---

  // The owner who claimed this location
  claimedBy        Owner?     @relation(fields: [claimedByOwnerId], references: [id])
  // All the posts associated with this location
  posts            Post[]
  // Users who have favorited this location
  favoritedBy      Favorite[]

  @@map("locations")
}

model Post {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text // Use Text type for potentially long reviews
  mediaUrl    String?  // Link to media file on AWS S3
  authorId    Int
  locationId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // --- Relations ---

  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  location      Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  // The tags associated with this post (via a join table)
  tags          PostTag[]
  // An official response from the location owner (if one exists)
  officialResponse OfficialResponse?

  @@map("posts")
}

model Tag {
  id      Int      @id @default(autoincrement())
  tagName String   @unique @db.VarChar(50) // e.g., "#LGBTQFriendly"

  // --- Relations ---

  // The posts that have this tag (via a join table)
  posts   PostTag[]

  @@map("tags")
}

model OfficialResponse {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  postId    Int      @unique // A post can only have one official response
  ownerId   Int      // The owner who wrote the response
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  owner     Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("official_responses")
}

// ----------------------------------------------
// JOIN MODELS - For Many-to-Many Relationships
// ----------------------------------------------

// Join table for Users following other Users
model Follow {
  followerId  Int // The user who is initiating the follow
  followingId Int // The user who is being followed

  // --- Relations ---

  follower    User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserIsFollowed", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // Composite primary key
  @@map("follows")
}

// Join table for Posts and Tags
model PostTag {
  postId Int
  tagId  Int

  // --- Relations ---

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId]) // Composite primary key
  @@map("post_tags")
}

// Join table for Users and their favorited Locations
model Favorite {
  userId     Int
  locationId Int
  createdAt  DateTime @default(now())

  // --- Relations ---

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([userId, locationId]) // Composite primary key
  @@map("favorites")
}
